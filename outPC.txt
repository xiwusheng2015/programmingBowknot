




浅谈持续集成的理解以及实现持续集成，需要做什么？
来自 <https://www.jianshu.com/p/82c63945e007> 



基于LinkedList实现的固定大小线性排序数据结构
来自 <https://www.cnblogs.com/wangcheng-blog/p/5203155.html> 

Java资源大全中文版

来自 <https://github.com/34benma/awesome-java-cn> 

//Map按value值从大到小排序，并取前10
//https://blog.csdn.net/Vicky_ZWH/article/details/77720028


Java导出数据行写入到Excel表格：基于Apache POI
来自 <https://blog.csdn.net/zhangphil/article/details/86079221> 


修改Win10默认窗口背景色为护眼色的方法
按Windows键+R，打开“运行”对话框，输入regedit：

修改[HKEY_CURRENT_USER\Control Panel\Colors]下Windows键值为 199 237 204，

修改另一个注册表：[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\DefaultColors\Standard]下Windows键值：默认ffffff（白色）改为c7edcc（199 237 204），保证休眠后（Win+L也一样）不会变白的。

来自 <https://blog.csdn.net/xjy9266/article/details/80947803> 



关于Mongodb原理的全面总结

来自 <https://www.jianshu.com/p/7f4b8a97ecf0> 

MongoDB的学习总结

来自 <https://www.jianshu.com/p/34a4585f66f1> 


Elasticsearch－基础介绍及索引原理分析
待看
来自 <https://www.cnblogs.com/dreamroute/p/8484457.html> 



Hive原理详解
有质量的博文
来自 <https://blog.csdn.net/ForgetThatNight/article/details/79632364?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1> 


GitBook 从懵逼到入门
写的很好，可以入门gitbook的使用
来自 <https://blog.csdn.net/lu_embedded/article/details/81100704> 
GitBook入门（用github做出第一本书）

来自 <https://blog.csdn.net/hk2291976/article/details/51173850?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-5&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-5> 


Cookie token seesion
token和refreshtoken
签名和验证
对称和非对称加密
开放性API 和oAuth
token代码生成工具类demo

来自 <https://www.cnblogs.com/fxwoniu/p/11569299.html> 




mongo和elasticsearch区别：
两者的首要差异
	• MongoDB是通用功能的非Restful风格的NoSQL数据库，文档以Bson格式存储，主要用于数据存储；
	• ElasticSearch是分布式全文检索引擎，可以提供实时Restful风格API处理海量面向文档的数据。文档采用Json风格，主要用于基于文本的数据搜索。

来自 <https://www.jianshu.com/p/8133eb936760> 
尽管Hadoop和MongoDB也有部分重叠的应用场景并且共同拥有一些有用的功能（无缝的水平扩展），但是两者之间还是有着特定的场景。如果你仅仅想要通过关键字和简单的分析，那么Elasticsearch可以完成任务；如果你需要查询文档，并且包含更加复杂的分析过程，那么MongoDB相当适合；如果你有一个海量的数据，需要大量不同的复杂处理和分析，那么Hadoop提供了最为广泛的工具和灵活性。

来自 <https://www.jianshu.com/p/2c7b0c76fa04> 


mongo和hive集成

来自 <https://blog.csdn.net/zgc_sitech/article/details/81298377> 


SQL高级:
建议一：
INNER JOIN中，多条件使用 ON或 WHERE的查询结果没有区别（本质有区别），但建议使用INNER JOIN ON条件A AND条件B，因为 SQL 语句执行顺序为 FROM -> ON -> JOIN -> WHERE，会优先处理 ON子句的条件，减少连表的数据量。
————————————————
版权声明：本文为CSDN博主「TreasureAI」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/treasure99/java/article/details/96480676


软件配置：
2020/4/27 8:57
肖总给的pom文件：
<dependencies>
<dependency>
<groupId>de.innosystec</groupId>
<artifactId>java-unrar</artifactId>
<version>0.5</version>
</dependency>
<dependency>
<groupId>org.apache.ant</groupId>
<artifactId>ant</artifactId>
<version>1.10.5</version>
</dependency>
</dependencies>

2020/4/27 15:54
<dependency> 
<groupId>org.apache.poi</groupId> 
<artifactId>poi</artifactId> 
<version>3.8</version> 
</dependency>

<build>
	<plugins>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-assembly-plugin</artifactId>
			<configuration>
			<descriptorRefs>
			<descriptorRef>jar-with-dependencies</descriptorRef>
			</descriptorRefs>
			<archive>
			<manifest>
			<mainClass>com.kirin.tools.main</mainClass>
			</manifest>
			</archive>
			</configuration>
			<executions>
			<execution>
			<id>make-assembly</id>
			<phase>package</phase>
			<goals>
			<goal>single</goal>
			</goals>
			</execution>
			</executions>
		</plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<configuration>
			<source>1.8</source>
			<target>1.8</target>
			<encoding>UTF-8</encoding>
			</configuration>
		</plugin>
	</plugins>
</build>



本机python环境的配置：
Python3的安装位置：<C:\Users\ywx934496\AppData\Local\Programs\Python\Python37>
Pip的安装位置：<C:\Users\ywx934496\AppData\Local\Programs\Python\Python37\Scripts>
Pip的配置文件（修改为华为内部源）<C:\Users\ywx934496\pip>
pip的使用： python -m pip install virtualenv
python直接调用python


Python2的安装位置：<C:\Python27>
Pip的安装位置：<C:\Python27\Scripts>
pip的使用： python2 -m pip install virtualenv
python直接调用python2

	• 均安装virtualenv和virtualenvwrapper-win实现虚拟多个python环境


=======================
爬虫
python2 与 python3 语法区别
有质量的博文
来自 <https://www.cnblogs.com/meng-wei-zhi/articles/8194801.html> 


Python爬虫(二十一)_Selenium与PhantomJS

来自 <https://www.cnblogs.com/miqi1992/p/8093958.html> 


python装饰器详
来自 <https://www.cnblogs.com/xiaxiaoxu/p/9786491.html> 

理解Python装饰器多参数模式(Decorator)

来自 <https://www.jianshu.com/p/ee82b941772a> 



使用BeautifulSoup爬虫

来自 <https://blog.csdn.net/hollyran/article/details/85250219> 

python Request库的get()方法

来自 <https://blog.csdn.net/k_koris/article/details/82950654> 


HttpClient4.X发送带参数的Get请求

来自 <https://blog.csdn.net/zknxx/article/details/51598852> 

数学的微分和积分：百度文库
https://wenku.baidu.com/view/3eb0680416fc700abb68fc94.html


===
厉害博客：

深入浅出vue.js的作者，95后，工作在阿里：
https://github.com/berwin


大深海 koa nodejs 工作在阿里：
https://github.com/chenshenhai


引用自Krahets' Blog

来自 <https://www.cnblogs.com/Howfars/p/13131718.html> 


myan CSDN 有深度的职业思考
https://blog.csdn.net/myan/article/details/52719139


darkread谷歌浏览器插件：
https://github.com/darkreader/darkreader

数学公式：
导数公式大全

来自 <https://wenku.baidu.com/view/fca04ce6d15abe23482f4d5b.html> 

极大似然估计详解，写的太好了！

来自 <https://blog.csdn.net/qq_39355550/article/details/81809467> 

=====
剑指offer：
刷题笔记--持续更新

来自 <https://blog.csdn.net/j879159541/article/details/105892359/> 


算法与数据结构 - 慕课网刘宇波老师

来自 <https://github.com/liuyubobobo/Play-with-Algorithms> 


九、链表
	1、从尾到头打印链表
	2、链表中倒数第k个结点
	 3、反转链表
	4、合并两个排序的链表
	5、复杂链表的复制
	6、两个链表的第一个公共结点
	7、链表中环的入口节点
	8、删除链表中重复的节点
	9、链表回文结构


程序员代码面试指南：左程云的  这本书下载下来看看咋样吧


引用自Krahets' Blog

来自 <https://www.cnblogs.com/Howfars/p/13131718.html> 

《剑指offer》Java版代码

来自 <https://github.com/GaoLeiQin/SwordOffer> 

四连问：API 接口应该如何设计？如何保证安全？如何签名？如何防重？
来自 <https://mp.weixin.qq.com/s/G9aRj8CABeN6A1rgKz62Jg> 


• 3. 数组中重复的数字 没看懂
• 4. 二维数组中的查找 OK
• 5. 替换空格 OK
• 6. 从尾到头打印链表 OK
• 7. 重建二叉树 OK
• 8. 二叉树的下一个结点 OK
• 9. 用两个栈实现队列 OK
• 10.1 斐波那契数列 OK
• 10.2 矩形覆盖 OK
• 10.3 跳台阶 OK
• 10.4 变态跳台阶 OK
• 11. 旋转数组的最小数字 OK
• 12. 矩阵中的路径 回溯 没看懂
• 13. 机器人的运动范围 深度优先 类似回溯法
• 14. 剪绳子  贪心和动态规划  没看懂
• 15. 二进制中 1 的个数 OK
• 16. 数值的整数次方 OK
• 17. 打印从 1 到最大的 n 位数 没看懂 回溯法
• 18.1 在 O(1) 时间内删除链表节点 OK
• 18.2 删除链表中重复的结点 OK 需要删除所有重复节点 递归
• 19. 正则表达式匹配 动态规划实现.*正则
• 20. 表示数值的字符串
• 21. 调整数组顺序使奇数位于偶数前面
• 22. 链表中倒数第 K 个结点
• 23. 链表中环的入口结点
• 24. 反转链表
• 25. 合并两个排序的链表
• 26. 树的子结构
• 27. 二叉树的镜像
• 28. 对称的二叉树
• 29. 顺时针打印矩阵
• 30. 包含 min 函数的栈
• 31. 栈的压入、弹出序列
• 32.1 从上往下打印二叉树
• 32.2 把二叉树打印成多行
• 32.3 按之字形顺序打印二叉树
• 33. 二叉搜索树的后序遍历序列
• 34. 二叉树中和为某一值的路径
• 35. 复杂链表的复制
• 36. 二叉搜索树与双向链表
• 37. 序列化二叉树
• 38. 字符串的排列
• 39. 数组中出现次数超过一半的数字
• 40. 最小的 K 个数
• 41.1 数据流中的中位数
• 41.2 字符流中第一个不重复的字符
• 42. 连续子数组的最大和
• 43. 从 1 到 n 整数中 1 出现的次数
• 44. 数字序列中的某一位数字
• 45. 把数组排成最小的数
• 46. 把数字翻译成字符串
• 47. 礼物的最大价值
• 48. 最长不含重复字符的子字符串 没看懂
• 49. 丑数
• 50. 第一个只出现一次的字符位置
• 51. 数组中的逆序对
• 52. 两个链表的第一个公共结点
• 53. 数字在排序数组中出现的次数
• 54. 二叉查找树的第 K 个结点
• 55.1 二叉树的深度
• 55.2 平衡二叉树
• 56. 数组中只出现一次的数字
• 57.1 和为 S 的两个数字
• 57.2 和为 S 的连续正数序列
• 58.1 翻转单词顺序列
• 58.2 左旋转字符串
• 59. 滑动窗口的最大值
• 60. n 个骰子的点数
• 61. 扑克牌顺子
• 62. 圆圈中最后剩下的数
• 63. 股票的最大利润
• 64. 求 1+2+3+...+n
• 65. 不用加减乘除做加法
• 66. 构建乘积数组
• 67. 把字符串转换成整数
• 68. 树中两个节点的最低公共祖先

来自 <https://github.com/CyC2018/CS-Notes/blob/master/notes/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md> 


没看懂：
48. 最长不含重复字符的子字符串

来自 <https://github.com/CyC2018/CS-Notes/blob/master/notes/48.%20%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.md> 

总结：
旋转数组的操作，滚动字幕的效果的题目

开锁问题是动态规划吗？广度优先

算术运算符字符串的计算 看一下

贪心，分治看一下

二叉树的路径和问题看一下

判断两个树是否一样，是否镜像


=====
MySQL笔记：
事物的四大特性(ACID)
并发事务带来哪些问题?
	• 脏读
	• 幻读
	• 不可重复读
	• 丢失修改

事务隔离级别有哪些?MySQL的默认隔离级别是?

	• READ-UNCOMMITTED(读取未提交)
	• READ-COMMITTED(读取已提交)
	• REPEATABLE-READ(可重复读)
	• SERIALIZABLE(可串行化)

MyISAM和InnoDB区别

MySQL索引使用的数据结构主要有BTree索引 和 哈希索引





来自 <https://github.com/Snailclimb/JavaGuide/blob/master/docs/database/MySQL.md> 



一条语句执行很慢的原因：
一个 SQL 执行的很慢，我们要分两种情况讨论：
1、大多数情况下很正常，偶尔很慢，则有如下原因
(1)、数据库在刷新脏页，例如 redo log 写满了需要同步到磁盘。
(2)、执行的时候，遇到锁，如表锁、行锁。

2、这条 SQL 语句一直执行的很慢，则有如下原因。
(1)、没有用上索引：例如该字段没有索引；由于对字段进行运算、函数操作导致无法用索引。
(2)、数据库选错了索引。



来自 <> 



建表的第一范式？
---


为什么不要用外键呢
	• 增加复杂度
	• 外键还会因为需要请求对其他表内部加锁而容易出现死锁情况
	• 对分库分表不友好 
外键的好处：
	• 保证了数据库数据的一致性和完整性；
	• 级联操作方便，减轻了程序代码量；


来自 <> 


为什么要使用索引？

MyISAM和InnoDB实现BTree索引方式的区别
不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键


来自 <https://github.com/Snailclimb/JavaGuide/blob/master/docs/database/MySQL%20Index.md> 


MVCC和事务的隔离级别


事务的隔离级别有4种

死锁

来自 <https://juejin.im/post/6844903645125820424> 



一条sql语句在mysql中如何执行的

来自 <https://github.com/Snailclimb/JavaGuide/blob/master/docs/database/%E4%B8%80%E6%9D%A1sql%E8%AF%AD%E5%8F%A5%E5%9C%A8mysql%E4%B8%AD%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84.md> 





MySQL四十五讲：


1 一条查询日志怎样执行的，
	查询语句
2 一条更新语句怎样执行，
	相关的日志模块知识
	crash-safe的能力
	为什么会有两份日志
03 讲事务隔离：为什么你改了我还看不见
	事务的四个隔离级别讲解
	事务隔离的实现
	同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）为什么建议你尽量不要使用长事务
	事务的启动方式
04讲深入浅出索引（上）
	索引的常见模型
	使用“N叉”树，这个N差不多是1200
	InnoDB 的索引模型
	基于主键索引和普通索引的查询有什么区别
	索引维护：建表语句里一定要有自增主键
05讲深入浅出索引（下）
	回到主键索引树搜索的过程，我们称为回表
	覆盖索引：避免回表
	联合索引，最左前缀原则

09讲普通索引和唯一索引，应该怎么选择
	数据页的大小默认是16KB。
	更新过程 change buffer
	唯一索引的更新就不能使用change buffer，普通索引改为唯一索引有性能代价
	写入之后马上会做查询不适合changeBuffer
	索引选择和实践
	change buffer 和 redo log
	redo log 主要节省的是随机写磁盘的IO消耗（转成顺序写），而change buffer主要节省的则是随机读磁盘的IO消耗。
10讲MySQL为什么有时候会选错索引
	扫描行数是怎么判断的
	原本可以执行得很快的SQL语句，执行速度却比你预期的慢很多
	索引选择异常和处理，加force index,或者修改语句，引导MySQL使用我们期望的索引order by b,a limit 1
11讲怎么给字符串字段加索引
	前缀索引，定义好长度
	前缀索引用不到覆盖索引
	索引选取的越长，相同的数据页能放下的索引值就越少
	倒序存储。hash字段，都不能使用范围查询了
12讲为什么我的MySQL会“抖”一下
	刷脏页，redolog写满了
	系统内存不足。当需要新的内存页
	InnoDB用缓冲池（buffer pool）管理内存
	正确地设置磁盘IO能力 innodb_io_capacity参数。刷脏页刷不刷邻居innodb_flush_neighbors=1 true
13讲为什么表数据删掉一半，表文件大小不变
	InnoDB表包含表结构定义和数据
	innodb_file_per_table表数据单独放在一个ibd文件中
	按页存储，标记删除，复用位置，
	整个表的数据删除，所有的数据页都会被标记为可复用
	重建表可以去掉空洞，收缩表大小
	optimize table、analyze table和alter table区别
14讲count(*)这么慢，我该怎么办
	为什么InnoDB不跟MyISAM一样，也把数字存起来呢
	即使是在同一个时刻的多个查询，由于多版本并发控制（MVCC）的原因，InnoDB表“应该返回多少行”也是不确定的
	普通索引树比主键索引树小很多，MySQL优化器会找到最小的那棵树来遍历
	count(字段)<count(主键id)<count(1)≈count(*)
	
20讲幻读是什么，幻读有什么问题
	可重复读隔离级别下，普通的查询是快照读，是不会看到别的事务插入的数据的。因此，幻读在“当前读”下才会出现
	for update，是当前读
	幻读有什么问题
	如何解决幻读：间隙锁(Gap Lock)
	binlog格式设置为row+读提交
21讲为什么我只改一行的语句，锁这么多
	间隙锁加锁规则
	等值查询间隙锁
	非唯一索引等值锁
23 MySQL是怎么保证数据不丢的



outPC2.txt<<<<<<<<<<

dd

解决的bug：
	• json文件只能写成一行，因为有的程序只读一行，把json格式化后，程序就不能读取了

	• ES的索引不能为大写，不然插入就报错

	• ES的自定义的键，不能以_开头，否则插入不进去

当前bug：ubuntu无法显示中文，url使用url编码出现错误，修改.bashrc显示中文export LANG="zh_CN.UTF-8"


====
机器学习：
Day03CZ-Python数据科学NPM入门V1.docx

数学基础-概率论

机器学习宝典项目
https://github.com/yuanxiaosc/Machine-Learning-Book

https://yuanxiaosc.github.io/2019/08/16/机器学习中的常识性问题/#more


====
算法：
平衡二叉树：平衡二叉搜索树（Self-balancing binary search tree）又被称为AVL树

来自 <https://blog.csdn.net/qq_25343557/article/details/89110319> 


分而治之：有点类似“大事化小、小事化了”的思想，经典的归并排序和快速排序都用到这种思想，可以看看 Search a 2D Matrix II 来理解这种思想。
动态规划：有点类似数学中的归纳总结法，找出状态转移方程，然后逐步求解。 309. Best Time to Buy and Sell Stock with Cooldown 是理解动态规划的一个不错的例子。
贪心算法：有时候只顾局部利益，最终也会有最好的全局收益。122. Best Time to Buy and Sell Stock II 看看该如何“贪心”。
搜索算法（深度优先，广度优先，二分搜索）：在有限的解空间中找出满足条件的解，深度和广度通常比较费时间，二分搜索每次可以将问题规模缩小一半，所以比较高效。
回溯：不断地去试错，同时要注意回头是岸，走不通就换条路，最终也能找到解决问题方法或者知道问题无解，可以看看 131. Palindrome Partitioning。


Stack：简单来说具有后进先出的特性，具体应用起来也是妙不可言，可以看看题目 32. Longest Valid Parentheses。
Linked List：链表可以快速地插入、删除，但是查找比较费时（具体操作链表时结合图会简单很多，此外要注意空节点）。通常链表的相关问题可以用双指针巧妙的解决，160. Intersection of Two Linked Lists 可以帮我们重新审视链表的操作。
Hash Table：利用 Hash 函数来将数据映射到固定的一块区域，方便 O(1) 时间内读取以及修改。37. Sudoku Solver 数独是一个经典的回溯问题，配合 HashTable 的话，运行时间将大幅减少。
Tree：树在计算机学科的应用十分广泛，常用的有二叉搜索树，红黑书，B+树等。树的建立，遍历，删除相对来说比较复杂，通常会用到递归的思路，113. Path Sum II 是一个不错的开胃菜。
Heap：特殊的完全二叉树，“等级森严”，可以用 O(nlogn) 的时间复杂度来进行排序，可以用 O(nlogk) 的时间复杂度找出 n 个数中的最大（小）k个，具体可以看看 347. Top K Frequent Elements。
————————————————
版权声明：本文为CSDN博主「东心十」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/chekongfu/java/article/details/82916504



码农田小齐推荐的算法刷题网址：
https://github.com/afatcoder/LeetcodeTop/blob/master/alibaba/backend.md
1. 按国内公司分类：https://github.com/afatcoder/LeetcodeTop
2. 按照算法类型分类：https://github.com/wisdompeak/LeetCode

Leetcode 1-919 题的解析：https://github.com/grandyang/leetcode


100题：相同的树
104题 二叉树的最大深度
144题 前序遍历
94题  中序遍历
111题： 二叉树的最小深度
559题 N叉树的最大深度




专题：二叉树的遍历


参考：
429题 N叉树的层序遍历
589题 N叉树的前序遍历
590题 N叉树的后续遍历




基于回溯的递归：

字符串的全排列

========

这我有亲身经历，之前在小公司，也就部署个SSM，外带些java+JDBC的功能，只求功能没毛病。我在小公司的时候，也能算不断上进，但也就深挖个Java核心方面的底层代码，或者在数据库方面也就探索个诸如执行计划等的单机版的优化方式，这些有用，但仅仅算最基本的技能。
但在大公司里，接触的都是分布式部署，产线上需要上万并发量，性能优化就不提了，平时动辄调试产线dubbo, netty, mycat等问题，而且查问题时需要进入到dubbo等底层代码，平时还有大神定期分享热门知识点，可以这样说，比起大公司的视野，我在小公司里就像井底之蛙

来自 <https://www.cnblogs.com/JavaArchitect/p/12097776.html> 

====
面试：各种锁的实现原理  MVVC

来自 <https://www.jianshu.com/p/59469da035e7> 

MySQL之MVVC简介

来自 <https://www.cnblogs.com/hirampeng/p/9944200.html> 


MySql事务及ACID实现的原理
redo log 保证事务持久性
undo log 保证原子性和隔离性

来自 <https://www.cnblogs.com/superchong/p/10847966.html> 


排序算法：




javaGuide官网： 
https://github.com/Snailclimb/JavaGuide#cap-%E7%90%86%E8%AE%BA
帅地的官网：
https://github.com/iamshuaidi/algo-basic#%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86%E4%B8%8E%E6%84%9F%E6%83%B3

过滤器和拦截器区别


java设计模式：
https://blog.csdn.net/pengjunlee/category_9268695.html
深入理解java虚拟机：
https://blog.csdn.net/pengjunlee/category_9268847.html


从简历被拒到收割今日头条offer，我花了一年时间
学习路线，学习方法，还有算法，大数据 值得借鉴。
来自 <https://mp.weixin.qq.com/s?__biz=MzU5MDY3MjAwNg==&mid=2247483864&idx=1&sn=670582b9242ac7e18d001410cd25c7de&chksm=fe3bf831c94c71271ce6ba1bd1897136fa296e15c1ca0c610cff25226c736e3d1f5ee8666fc6&scene=21#wechat_redirect> 



001期~150期汇总，方便阅读，不断更新中.....

来自 <https://mp.weixin.qq.com/s?__biz=MzIyNDU2ODA4OQ==&mid=2247485351&idx=2&sn=214225ab4345f4d9c562900cb42a52ba&chksm=e80db1d1df7a38c741137246bf020a5f8970f74cd03530ccc4cb2258c1ced68e66e600e9e059&scene=21#wechat_redirect> 


系统架构图 
https://blog.csdn.net/kion0929/article/details/102667123

网关基本功能：
 路由转发和过滤器
智能路由，权限校验，监控和限流

Gateway网关简介及使用
来自 <https://blog.csdn.net/rain_web/article/details/102469745?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-8.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-8.channel_param> 

nginx基本原理介绍 浅析 工作过程 epoll库
来自 <https://blog.csdn.net/wangbiao007/article/details/82910709> 

epoll模型的讲解
https://blog.csdn.net/zhaobryant/article/details/80557262

Nginx与网关的区别

来自 <https://www.cnblogs.com/yuhuiqing/p/11911668.html> 

Java两种动态代理JDK动态代理和CGLIB动态代理

来自 <https://blog.csdn.net/flyfeifei66/article/details/81481222?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param> 


三四月份面试阿里菜鸟+腾讯IEG，在这边有一些心得分享给大家（Java岗）

来自 <https://blog.csdn.net/weixin_44782075/article/details/90085013?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param> 


1. 在执行minor gc的时候进行的一系列检查
执行Minor GC的时候，JVM会检查老年代中最大连续可用空间是否大于了当前新生代所有对象的总大小。
如果大于，则直接执行Minor GC（这个时候执行是没有风险的）。
如果小于了，JVM会检查是否开启了空间分配担保机制，如果没有开启则直接改为执行Full GC。
如果开启了，则JVM会检查老年代中最大连续可用空间是否大于了历次晋升到老年代中的平均大小，如果小于则执行改为执行Full GC。
如果大于则会执行Minor GC，如果Minor GC执行失败则会执行Full GC

来自 <https://blog.csdn.net/wilsonpeng3/article/details/70064336?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param> 


什么时候会发生FullGC

来自 <https://blog.csdn.net/qq_38384440/article/details/81710887> 
https://blog.csdn.net/wilsonpeng3/article/details/70064336




关于GC原理和性能调优实践，看这一篇就够了！
CMS垃圾回收有什么问题
1 最终标记阶段停顿时间过长，新生代对老年代的无效引用
2 并发模式失败 & 晋升失败，新生代发生垃圾回收，
同时老年代又没有足够的空间容纳晋升的对象时，CMS 垃圾回收就会
退化成单线程的 Full GC
3 内存碎片问题，可通过参数 CMSFullGCsBeforeCompaction 的值，
设置多少次 Full GC 触发一次压缩

来自 <https://juejin.im/post/6844903953415536654> 


为什么Kafka速度那么快

来自 <https://www.cnblogs.com/binyue/p/10308754.html> 


了解下Mysql的间隙锁及产生的原因

来自 <https://www.cnblogs.com/wt645631686/p/8324671.html> 

浅谈二叉查找树、AVL树、红黑树、B树、B+树的原理及应用

来自 <https://blog.csdn.net/daaikuaichuan/article/details/80778955> 


ConcurrentHashMap 1.8为什么要使用CAS+Synchronized取代Segment+ReentrantLock

来自 <https://blog.csdn.net/weixin_30808693/article/details/95243239?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param> 



todo
Java内存管理机制

来自 <https://www.cnblogs.com/steffen/p/11368018.html> 

Spring的依赖注入

如何在面试中介绍自己的项目经验

来自 <https://www.cnblogs.com/JavaArchitect/p/7586949.html> 

mybatis的事物 的配置

redis同步策略
循环引用问题spring如何处理的
concurrentHashmap1.8为什么放弃了分段锁
行级索引失效
zset跳跃表
springboot启动流程
为什么要使用springboot,有什么好处
springboot自动配置是如何实现的
数据库分库分表相关

来自 <https://blog.csdn.net/wushuangshixinqiu/article/details/88764487> 


最近负责的项目的流程图
项目设计，为什么这么设计，什么好处，数据量有多少，再增大100倍呢，
碰到的真正的难题是什么，

来自 <https://blog.csdn.net/wushuangshixinqiu/article/details/88764487


阿里P6面经：
https://www.jianshu.com/p/0d412d24074e
成功拿下阿里P6的offer后，总结出大厂面试的血泪史

来自 <https://blog.csdn.net/Lubanjava/article/details/108970394?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control> 

架构设计，数据库设计 谈谈你的架构设计思路

来自 <https://blog.csdn.net/Lubanjava/article/details/109105901> 



头天一面竟然问我maven：
https://www.toutiao.com/i6783112941634847244/?tt_from=weixin&utm_campaign=client_share&wxshare_count=1&timestamp=1605874518&app=news_article&utm_source=weixin&utm_medium=toutiao_ios&use_new_style=1&req_id=20201120201517010026077201369602A6&group_id=6783112941634847244

为什么需要破坏双亲委派？
因为在某些情况下父类加载器需要委托子类加载器去加载class文件。受到加载范围的限制，父类加载器无法加载到需要的文件，以Driver接口为例，由于Driver接口定义在jdk当中的，而其实现由各个数据库的服务商来提供，比如mysql的就写了MySQL Connector，那么问题就来了，DriverManager（也由jdk提供）要加载各个实现了Driver接口的实现类，然后进行管理，但是DriverManager由启动类加载器加载，只能记载JAVA_HOME的lib下文件，而其实现是由服务商提供的，由系统类加载器加载，这个时候就需要启动类加载器来委托子类来加载Driver实现，从而破坏了双亲委派，这里仅仅是举了破坏双亲委派的其中一个情况。

来自 <https://blog.csdn.net/u012129558/article/details/81540804> 


Java SPI机制详解https://juejin.cn/post/6844903605695152142
 java的SPI机制可以为某个接口寻找服务实现。

比如有个接口，想运行时动态的给它添加实现，你只需要添加一个实现
 
SPI接口的定义在调用方，在概念上更依赖调用方；组织上位于调用方所在的包中；实现位于独立的包中。

当服务的提供者提供了一种接口的实现之后，需要在classpath下的META-INF/services/目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个jar包（一般都是以jar包做依赖）的META-INF/services/中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK中查找服务实现的工具类是：java.util.ServiceLoader。

作者：aoho
链接：https://juejin.cn/post/6844903605695152142



spring中的过滤器与拦截器

Filter 的接口
init ：
doFilter ：
destory ：

拦截器是 AOP 的一种实现策略，用于在某个方法或字段被访问前对它进行拦截，
然后在其之前或之后加上某些操作。同 filter 一样，interceptor 也是链式调用
preHandler
postHandler：

在 Http 的请求执行过程中，要经过以下几个步骤：
由 DispatcherServlet 捕获请求
DispatcherServlet 将接收到的 URL 和对应的 Controller 进行映射
在请求到达相应的 Controller 之前，由拦截器对请求进行处理
处理完成之后，进行视图的解析
返回视图
而两者最大的区别在于 ：过滤器是在 Servlet 规范中定义的，是由 Servlet 容器支持的；
拦截器是在 Spring 容器内的，由 Spring 框架支持。

总的来说，两者主要在如下方面存在着差异 ：

过滤器是基于函数的回调，而拦截器是基于 Java 反射机制的
过滤器可以修改 request，而拦截器则不能
过滤器需要在 servlet 容器中实现，拦截器可以适用于 JavaEE、JavaSE 等各种环境
拦截器可以调用 IOC 容器中的各种依赖，而过滤器不能
过滤器只能在请求的前后使用，而拦截器可以详细到每个方法


链接：https://juejin.cn/post/6844903991478861831



NIO netty的入门：
https://mp.weixin.qq.com/s/kUkw-RoqLEEr1xuv2ex0FQ



Spring的循环依赖：

https://juejin.cn/post/6844903806757502984
=====

回顾遗漏：
redis的事务
springboot打包jar还是war，热部署 
autowired原理

ThreadLocal 是什么，原理，数据结构
springboot的优点，有哪些特性
springBoot三个核心注解
https://blog.csdn.net/weixin_30532759/article/details/95894818?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param

springboot的启动原理

日志打印，日志记录，请求访问时间的统计
日志打印放在哪里

AOP实现日志的具体步骤
controller作用域单例
select * 和select1 区别
explain字段值的含义

限流算法 



2020/10/29 20:18
阿里电话面试回顾：
线程池，线程池参数，blockingQueue的区别
MySQL的B+ 锁，加索引的原则有哪些
InnoDB和MyISAM区别
i++是否线程安全，加上valitile是否可行
synchronized和reentrantLock区别
Java内存模型和JVM内存模型
轻量级锁的理解

SpringMVC的流程
垃圾回收的过程，CMS垃圾回收器，
对象从新建到回收的过程
Java的对象头和对象组成详解 


Java的结构之美【2】——销毁对象 内存泄漏代码
cloud挂了会怎么样？
springboot有什么特性


2020/10/30 17:04
币安研究院：
大数据在两个数据集中的交集问题
redis秒杀超卖问题
redis IO模型知识

序列化，uuid原理

Stream的原理，超长链表转为hashmap的扩容问题
单例模式
全局ID生成器
线程的5种状态，
object的相关方法 wait notify，notifyall的流程
hashmap的put方法的流程
ArrayList和LinkedList查找元素哪个效率高
线程安全，synchronize原理
链表环的入口
redissen分布式锁的实现原理
乐观锁和悲观锁的区别，数据库中的乐观锁和悲观锁
间隙锁，什么时候会加间隙锁
数据库实现了哪些优化，
开发中遇到了哪些问题

怎么排查oom
怎么排查CPU占用

序列化
springmvc
 
redis 击穿
秒杀
 
超卖
 
ThreadLocal
 

lamda 表达式性能问题
是不是就是先将Lambda表达式转换成某个类，然后生成一个实例以便提供给forEach方法调用呢？
 

ConcurrentHashMap

 
锁消除、锁粗化 | 见hollis文章


寻找链表环的入口

MySQL索引背后的数据结构及原理

定位到页后，如何定位到具体字的 稀疏索引

AutoWared原理：
在容器启动，为对象赋值的时候，遇到@Autowired注解，会用后置处理器机制，来创建属性的实例，然后再利用反射机制，将实例化好的属性，赋值给对象上，这就是Autowired的原理。
AutoWared原理讲解：
注解@Autowired是如何实现的 也讲解了自定义注解实现方法




mysql数据库大小 和索引大小 对比 todo


掌门一对一：2020/11/3 9:45
mysql 索引失效
redis的redlock， 动态数组和ziplist和跳表



美团 2020/11/4 16:29
select 快照读
当前读

来自 <https://blog.csdn.net/sanyuesan0000/article/details/90235335> 


阿里菜鸟面试 2020/11/10 14:48
经常fullGC怎么排查

minorGC和FullGC触发时间
https://blog.csdn.net/summerZBH123/article/details/81131945

@Resource 和@Autowired的区别

Redis从3个扩容到4个，怎么才能数据迁移最小

阿里巴巴菜鸟网络面试经历
来自 <https://blog.csdn.net/wushuangshixinqiu/article/details/88764487> 


阿里菜鸟二面2020/11/17：
架构设计能力：
领域建模；阿里P6的基本要求有哪些。
数据库表的设计
客户管理系统，会员管理系统，
 
maven clean -u
maven 依赖版本优先级
kafka高可用的原理
 
 
java虚拟机栈的结构，
 
 
双亲委派和java language.string类是否可以新建
 
HashMap的原理，为什么是2的n次方
 服务拆分的方法
秒杀的场景分析

 
 
=============字节跳动一面：11/22日============
hashmap的bilibili视频：hashmap扩容过程，成环的细节，扩容时机，
 
双亲委派 什么时候需要，
GC模型过程
分代回收，多线程收集过程
栈怎样引用堆中对象，对象的访问定位两种方式
 
jvm内存结构
volatile
联合索引，加索引的规则
索引的原理和优点
幻读实现的两种方式 MVVC+ GapLock
 
当前读和快照读区别：
https://blog.csdn.net/qq_36951116/article/details/106017852


=============字节二面：11/26日 =============
泛化的方案的思考：
服务治理  高可用和稳定性
限流怎么做
缓存一致性怎么解决 强一致性的方案
token验证方案
 
 
手写算法题：
//https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/solution/ha-xi-biao-jie-jue-by-user9563g/
 
==阿里的短暂的一面===
秒杀系统


=============字节三面 12/02=============
redis 上的锁 挂机了怎么办？
https://zhuanlan.zhihu.com/p/73807097

使用多个Redis冗余实例 redlock
如果一个Redis节点挂了 延迟重启
过期时间戳
各个机器时间流速的一致性假设
watchdog的续租机制
https://zhuanlan.zhihu.com/p/100140241
https://dbaplus.cn/news-159-3080-1.html


concurrent hashmap. 怎么实现的锁
剑指 offer的第四题，从上到下从左到右递增，怎么查找target？
文件断点续传
乐观锁 悲观锁
查找前100个数，用最小堆实现 不考虑内存的话 个人感觉用归并排序实现
常用的是个排序算法的时间复杂度空间复杂度 弄清楚---对排序 快速排序 归并排序
Kafka重复消费问题原因是什么？at least once ?
项目运行的状态 访问量 KPS？
 
用redis做锁 有什么缺点？
https://zhuanlan.zhihu.com/p/73807097


堆的时间复杂度是(nlogk).  其中 k是堆的大小 n是需要排序的数组
归并排序的时间复杂度是（nlogn）归并排序的空间复杂度是O(n) 因为分治前需要复制整个数组


Top K 问题的解决方案

来自 <https://blog.csdn.net/qq_28114615/article/details/86231822?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control> 
https://blog.csdn.net/zyq522376829/article/details/47686867


=============携程机票现场面试 20201201=============
countdownLatch，信号量，cycle的代码手写
两个接口的转化
接口数据加密，安全性怎么保证
kafka的顺序消费
数据库在线迁移


=============20201124 爱奇艺面试=============
数据双写一致性问题
库存扣减的事务性解决办法
https的证书通讯流程
手写代码：1 string格式的数字转化为double
2 二叉树的层序遍历加换行和反向打印
长连接与短连接
volatile和i++








深入理解Java虚拟机栈的栈帧

来自 <https://blog.csdn.net/u012988901/article/details/100043857> 




Springboot面试：
SpringBoot三大特性之组件自动装配
Spring Boot简介，四大核心，特性
spring boot的四大特性（面试必问）


线程池拒绝策略分别使用在什么场景
中止策略：无特殊场景。
丢弃策略：无关紧要的任务（博客阅读量）。
弃老策略：发布消息。
调用者运行策略：不允许失败场景（对性能要求不高、并发量较小）。

来自 <https://www.cnblogs.com/waitmoon/p/13442193.html> 



redis动态字符串SDS：
计数方式不同
杜绝缓冲区溢出
减少修改字符串时带来的内存重分配次数
二进制安全
来自 <https://mp.weixin.qq.com/s/VY31lBOSggOHvVf54GzvYw> 



MyBatis框架及原理分析

SpringCloud常见面试题（2020最新版）

来自 <https://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247498530&idx=2&sn=472812704ec21fca999573395be82625&chksm=ebd5c40edca24d18f056de7509a5c603dfae6f4b4b2da391172f64d9b9a65158281b105b568e&scene=132#wechat_redirect> 




把 Spring Cloud 给拆了！详解每个组件的作用

来自 <https://mp.weixin.qq.com/s?__biz=MzI1NTE3OTk4Nw==&mid=2653740770&idx=1&sn=6ad1864f66f81da463f5260dbca31f03&chksm=f1e1935ec6961a488c510ad390486998ed774a6d79d2f627a5610d9c1e97661c22d8f3eb611d&scene=132#wechat_redirect> 


谈谈ConcurrentHashMap是如何保证线程安全的？

来自 <https://mp.weixin.qq.com/s?__biz=MzIyNDU2ODA4OQ==&mid=2247484254&idx=1&sn=254e24f05ae25a718a3be4b25262cf30&chksm=e80db528df7a3c3e29b774160b6a5ef96f7aaaa624ffc0d811118f9d5e3a85903a0f56da5faf&scene=21#wechat_redirect> 


锁升级的过程：
https://www.jianshu.com/p/88631590b1d9

什么时候会加间隙锁：
https://www.cnblogs.com/wt645631686/p/8324671.html


stream的原理，为什么慢，为什么list才可以用stream
排查full GC CPU高
数据库表的设计问题


锁升级过程：
https://www.cnblogs.com/mingyueyy/p/13054296.html



















