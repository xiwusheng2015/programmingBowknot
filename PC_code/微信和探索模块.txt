
快乐数.java
注解学习.java
链表是否相交.java

反序打印字符串递归.java
天气问题.java
序列化和反序列化.java
接雨水.java
杨辉三角leetcode118.java

===


%%%%%%%%%%

package com.kirin.LeetCode.微信;

public class 快乐数 {

    public static void main(String[] args) {
        boolean happy = isHappy(19);
        System.out.println(happy);
    }

    public static boolean isHappy(int n) {
        if (n == 1) return true;
        int temp = n;
        int sum = 0;

        while (sum != 1) {
            sum = 0;
            // 计算得到sum
            while (temp != 0) {
                int cur = temp % 10;
                sum += cur * cur;
                temp /= 10;
            }
            if (sum == n) return false;
            if (sum == 4) return false;
            temp = sum;
        }
        return true;
    }
}


%%%%%%%%%%

package com.kirin.LeetCode.微信;

import java.lang.annotation.*;
import java.lang.reflect.Method;

public class 注解学习 {
}
//https://mp.weixin.qq.com/s?__biz=MzAxMjY1NTIxNA==&mid=2454441897&idx=1&sn=729688d470c94560c1e73e79f0c13adc&chksm=8c11e0a8bb6669be1cc4daee95b221ba437d536d598520d635fac4f18612dded58d6fddb0dce&scene=21#wechat_redirect
/**
 * 定义一个可以注解在Class,interface,enum上的注解
 *
 * @author zhangqh
 * @date 2018年4月22日
 */
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
 @interface MyAnTargetType {
    /**
     * 定义注解的一个元素 并给定默认值
     * @return
     */
    String value() default "我是定义在类接口枚举类上的注解元素value的默认值";
}


/**
 * 定义一个可以注解在METHOD上的注解
 *
 * @author zhangqh
 * @date 2018年4月22日
 */
@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
 @interface MyAnTargetMethod {
    /**
     * 定义注解的一个元素 并给定默认值
     * @return
     */
    String value() default "我是定义在方法上的注解元素value的默认值";
}


/**
 * 定义一个可以注解在FIELD上的注解
 *
 * @author zhangqh
 * @date 2018年4月22日
 */
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
 @interface MyAnTargetField {
    /**
     * 定义注解的一个元素 并给定默认值
     * @return
     */
    String value() default "我是定义在字段上的注解元素value的默认值";
}


/**
 * 定义一个可以注解在PARAMETER上的注解
 *
 * @author zhangqh
 * @date 2018年4月22日
 */
@Target({ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
 @interface MyAnTargetParameter {
    /**
     * 定义注解的一个元素 并给定默认值
     * @return
     */
    String value() default "我是定义在参数上的注解元素value的默认值";
}


//编写一个测试处理类处理以上注解，这边不过多解释，代码中都写了对应的注释如下：



/**
 * 测试java注解类
 *
 * @author zhangqh
 * @date 2018年4月22日
 */
@MyAnTargetType
class AnnotationTest {

    @MyAnTargetField
    private String field = "我是字段";

    @MyAnTargetMethod("测试方法")
    public void test(@MyAnTargetParameter String args) {
        System.out.println("参数值 === "+args);
    }

    public static void main(String[] args) {

        // 获取类上的注解MyAnTargetType
        MyAnTargetType t = AnnotationTest.class.getAnnotation(MyAnTargetType.class);
        System.out.println("类上的注解值 === "+t.value());

        MyAnTargetMethod tm = null;
        try {
            // 根据反射获取AnnotationTest类上的test方法
            Method method = AnnotationTest.class.getDeclaredMethod("test",String.class);
            // 获取方法上的注解MyAnTargetMethod
            tm = method.getAnnotation(MyAnTargetMethod.class);
            System.out.println("方法上的注解值 === "+tm.value());

            // 获取方法上的所有参数注解  循环所有注解找到MyAnTargetParameter注解
            Annotation[][] annotations = method.getParameterAnnotations();
            for(Annotation[] tt : annotations){
                for(Annotation t1:tt){
                    if(t1 instanceof MyAnTargetParameter){
                        System.out.println("参数上的注解值 === "+((MyAnTargetParameter) t1).value());
                    }
                }
            }
            method.invoke(new AnnotationTest(), "改变默认参数");

            // 获取AnnotationTest类上字段field的注解MyAnTargetField
            MyAnTargetField fieldAn = AnnotationTest.class.getDeclaredField("field").getAnnotation(MyAnTargetField.class);
            System.out.println("字段上的注解值 === "+fieldAn.value());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


%%%%%%%%%%

package com.kirin.LeetCode.微信;

import com.kirin.LeetCode.DataTree;
import com.kirin.LeetCode.ListNode;

public class 链表是否相交 {

    public static void main(String[] args) {
        ListNode a1 = new ListNode(1);
        ListNode a2 = new ListNode(2);
        ListNode a3 = new ListNode(3);
        ListNode a4 = new ListNode(4);
        ListNode a5 = new ListNode(5);

        a1.next = a2;
        a2.next = a3;
        a3.next = a4;
        a5.next = a3;

        ListNode node = new 链表是否相交().find_node(a1, a5);
        System.out.println(node);
    }

    public ListNode find_node(ListNode p1, ListNode p2){

        ListNode head1 = p1;
        ListNode head2 = p2;

        if(p1 == null || p2 == null) {
            return null;
        }

        int len1 = 1;
        int len2 = 1;

        while(p1.next != null){
            p1 = p1.next;
            len1++;
        }

        while(p2.next != null){
            p2 = p2.next;
            len2++;
        }

        if(p1 != p2){
            return null;
        }

        int diff = 0;
        if(len1 > len2){
            p1 = head1;
            p2 = head2;
            diff = len1 - len2;
        } else{
            p1 = head2;
            p2 = head1;
            diff = len2 - len1;
        }

        for( int i = 0; i < diff; i++){
            p1 = p1.next;
        }

        while(p1 != p2){
            p1 = p1.next;
            p2 = p2.next;
        }

        return p1;

    }

    public static ListNode getListNodeTemp(){
        ListNode a1 = new ListNode(1);
        ListNode a2 = new ListNode(2);
        ListNode a3 = new ListNode(3);
        ListNode a4 = new ListNode(4);
        ListNode a5 = new ListNode(5);

        a1.next = a2;
        a2.next = a3;
        a3.next = a4;
        a5.next = a3;

        return a1;
    }
}

===






%%%%%%%%%%

package com.kirin.LeetCode.探索模块;

import com.kirin.LeetCode.DataTree;
import com.kirin.LeetCode.ListNode;

import java.util.ArrayList;
import java.util.List;

/*
https://github.com/dzydzydzy7/LeetcodeExplore/blob/master/LeetcodeExplore.md
 */
public class 反序打印字符串递归 {

    public static void main(String[] args) {

        char[] c = new char[]{'a', 'b', 'c'};
        printReverse(c);
    }

    private static void printReverse(char[] str) {
        helper(0, str);
    }

    private static void helper(int index, char[] str) {

        if (str == null || index >= str.length) return;


        helper(index + 1, str);
        System.out.println(str[index]);

    }

}

class 反转字符串leetcode334 {

    public static void main(String[] args) {
        char[] c = new char[]{'a', 'b', 'c', 'd'};
        new 反转字符串leetcode334().reverseString(c);
        System.out.println(c);
    }

    // 原地操作交换字符数组元素
    public void reverseString(char[] s) {
        recursion(s, 0, s.length - 1);
    }

    private void recursion(char[] s, int left, int right) {

        if (left >= right) return;

        char temp = s[left];
        s[left] = s[right];
        s[right] = temp;

        recursion(s, left + 1, right - 1);

    }

}


class 两两交换链表中的节点leetcode24 {

    public static void main(String[] args) {

        ListNode listNode = DataTree.getListNode();
        ListNode a = new 两两交换链表中的节点leetcode24().swapPairs(listNode);
        System.out.println(a);
    }

    public ListNode swapPairs(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode p = head.next.next;
        ListNode res = head.next;

        head.next.next = head;

        head.next = swapPairs(p);

        return res;
    }

}




%%%%%%%%%%

package com.kirin.LeetCode.探索模块;

import java.util.Stack;

/*
https://labuladong.github.io/ebook/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88.html
 */
public class 天气问题 {

    // 单调栈，返回下一个比自己高的温度需要几天
    public int[] dailyTemperatures(int[] T) {

        int[] ans = new int[T.length];
        Stack<Integer> s = new Stack<>();

        for (int i = T.length - 1; i >= 0; i--) {

            // 弹出所有小的元素
            while (!s.isEmpty() && T[s.peek()] <= T[i]) {
                s.pop();
            }
            ans[i] = s.isEmpty() ? 0 : (s.peek() - i);
            s.push(i);
        }
        return ans;
    }
}


%%%%%%%%%%

package com.kirin.LeetCode.探索模块;

import com.kirin.LeetCode.TreeNode;

import java.util.LinkedList;
import java.util.Queue;

public class 序列化和反序列化 {

    // 序列化
    public String serialize(TreeNode root) {
        return recursion(root);
    }

    // 反序列化
    public TreeNode deserialize(String data) {

        if (data == null) return null;

        // 拆分字符串，放入队列
        String[] values = data.split(" ");
        Queue<String> queue = new LinkedList<>();
        for (String str : values) {
            queue.offer(str);
        }

        return recursiveRecovery(queue);
    }

    private TreeNode recursiveRecovery(Queue<String> queue) {

        String str = queue.poll();
        if (str.equals("#")) return null;
        // 按照相同的顺序恢复
        TreeNode root = new TreeNode(Integer.parseInt(str));
        root.left = recursiveRecovery(queue);
        root.right = recursiveRecovery(queue);
        return root;
    }

    private String recursion(TreeNode node) {
        if (node == null) return "# ";
        StringBuilder sb = new StringBuilder();
        sb.append(node.val).append(" ");
        sb.append(recursion(node.left));
        sb.append(recursion(node.right));

        return sb.toString();
    }


}


%%%%%%%%%%

package com.kirin.LeetCode.探索模块;

/*
https://labuladong.github.io/ebook/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%8E%A5%E9%9B%A8%E6%B0%B4.html
 */
public class 接雨水 {

    public static void main(String[] args) {
        int[] a = new int[]{1, 0, 2, 1, 2, 0, 1};
        int trap = trap(a);
        System.out.println(trap);
    }

    public static int trap2(int[] height) {

        if (height.length == 0) return 0;

        int n = height.length;
        int ans = 0;

        // 数组充当备忘录
        int[] l_max = new int[n];
        int[] r_max = new int[n];

        // 初始化 base case
        l_max[0] = height[0];
        r_max[n - 1] = height[n - 1];

        // 从左向右计算 l_max
        for (int i = 1; i < n; i++) {
            l_max[i] = Math.max(height[i], l_max[i - 1]);
        }
        for (int i = n - 2; i >= 0; i--) {
            r_max[i] = Math.max(height[i], r_max[i + 1]);
        }

        // 计算答案,两边的舍弃
        for (int i = 1; i < n - 1; i++) {
            ans += Math.min(l_max[i], r_max[i]) - height[i];
        }

        return ans;
    }

    //三、双指针解法
    //l_max 是 height[0..left] 中最高柱子的高度，
    // r_max 是 height[right..end] 的最高柱子的高度。
    public static int trap(int[] height) {

        if (height.length == 0) return 0;

        int n = height.length;
        int left = 0, right = n - 1;
        int ans = 0;

        int l_max = height[0];
        int r_max = height[n - 1];

        while (left <= right) {
            l_max = Math.max(l_max, height[left]);
            r_max = Math.max(r_max, height[right]);

            if (l_max < r_max) {
                ans += l_max - height[left];
                left++;
            } else {
                ans += r_max - height[right];
                right--;
            }
        }
        return ans;

    }


}


%%%%%%%%%%

package com.kirin.LeetCode.探索模块;

import java.util.*;

public class 杨辉三角leetcode118 {


    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> lists = new ArrayList<>();
        for (int i = 0; i < numRows; i++) {
            lists.add(new ArrayList<>());
            for (int j = 0; j <= i; j++) {
                lists.get(i).add(triangle(i, j));
            }
        }
        return lists;
    }

    private int triangle(int i, int j) {
        if (j == 0 || i == j) return 1;
        return triangle(i - 1, j - 1) + triangle(i - 1, j);
    }

}

class 杨辉三角leetcode118_2 {

    public List<List<Integer>> generate(int numRows) {

        List<List<Integer>> lists = new ArrayList<>();
        if (numRows == 0) return lists;
        // 第1行
        lists.add(new ArrayList<>());
        lists.get(0).add(1);

        for (int i = 1; i < numRows; i++) {
            lists.add(new ArrayList<>());
            // 第一列
            lists.get(i).add(1);
            // 中间
            for (int j = 1; j <= i - 1; j++) {
                lists.get(i).add(lists.get(i - 1).get(j - 1) + lists.get(i - 1).get(j));
            }
            // 最后一列
            lists.get(i).add(1);
        }

        return lists;
    }
}




